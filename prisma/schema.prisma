//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Donation.prisma
//

enum FoodCategory {
  GREENS
  COOKED
  GRAINS
  DAIRY
  FROZEN
  GROCERIES
}

model Donation {
  id                   Int          @id @default(autoincrement())
  title                String
  category             FoodCategory
  latitude             Float
  longitude            Float
  pickUpTimestampStart DateTime
  pickUpTimestampEnd   DateTime
  expiryDate           DateTime
  description          String
  user                 user         @relation(fields: [userId], references: [id])
  userId               String
  pictures             Picture[]
  SafetyCheck          SafetyCheck?
  area                 String?
  driverId             Int?
  driver               Driver?      @relation(fields: [driverId], references: [id])
  recipientId          Int?
  recipient            Recipient?   @relation(fields: [recipientId], references: [id])
}

model Picture {
  id         Int      @id @default(autoincrement())
  url        String
  donation   Donation @relation(fields: [donationId], references: [id])
  donationId Int
}

//
// Driver.prisma
//

model Driver {
  id                      Int               @id @default(autoincrement())
  carType                 String
  carMake                 String
  carModel                String
  manufactureYear         String
  color                   String
  registrationCertificate String
  licensePlate            String
  photos                  String[]
  vehicleInspictionReport String
  driverLicense           String
  verified                Boolean
  userId                  String
  user                    user              @relation(fields: [userId], references: [id])
  driverReviews           DriverReview[]
  recipientReviews        RecipientReview[]
  DonorReview             DonorReview[]
  donations               Donation[]
}

//
// Homeless.prisma
//

model Homeless {
  id            Int     @id @default(autoincrement())
  longitude     Float
  latitude      Float
  address       String
  description   String?
  confirmations Int?
}

//
// Recipient.prisma
//

enum OrganizationType {
  ORPHANAGE
  HOMELESS_SHELTER
  COMMUNITY_KITCHEN
  FAMILY_IN_NEED
  ANIMAL_SHELTER
}

model Recipient {
  id              Int               @id @default(autoincrement())
  logo            String
  name            String
  type            OrganizationType
  pictures        String[]
  amountOfPeople  Int
  bio             String
  userId          String
  user            user              @relation(fields: [userId], references: [id])
  driverReviews   DriverReview[]
  recipientReview RecipientReview[]
  DonorReview     DonorReview[]
  donations       Donation[]
}

//
// Review.prisma
//

model DriverReview {
  id                Int     @id @default(autoincrement())
  pickupConvenience Int
  donorDestination  Int
  packaging         Int
  additionalNotes   String?
  type              String
  correctAddress    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId Int

  recipient   Recipient @relation(fields: [recipientId], references: [id])
  recipientId Int

  donor   user   @relation(fields: [donorId], references: [id])
  donorId String
}

model RecipientReview {
  id                Int           @id @default(autoincrement())
  deliveredWell     Boolean
  additionalNotes   String?
  fitCategory       Boolean
  preferredCategory FoodCategory
  quantityEnough    Boolean
  servingsCount     ServingsCount

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId Int

  recipient   Recipient @relation(fields: [recipientId], references: [id])
  recipientId Int

  donor   user   @relation(fields: [donorId], references: [id])
  donorId String
}

enum ServingsCount {
  LESS_THAN_5
  LESS_THAN_10
  LESS_THAN_50
  LESS_THAN_100
  OTHER
}

model DonorReview {
  id              Int     @id @default(autoincrement())
  safetyCheck     Boolean
  additionalNotes String

  driver   Driver @relation(fields: [driverId], references: [id])
  driverId Int

  recipient   Recipient @relation(fields: [recipientId], references: [id])
  recipientId Int

  donor   user   @relation(fields: [donorId], references: [id])
  donorId String
}

//
// SafetyCheck.prisma
//

enum Issues {
  BLOATED_CANS
  UNSAFE_BAGS
  STALE_BAKERY
  ROTTEN_FRUITS_OR_VEGETABLES
}

model SafetyCheck {
  id              Int      @id @default(autoincrement())
  expired         Boolean
  leaking         Boolean
  spoiled         Boolean
  issues          Issues[]
  cookedIsExpired Boolean?
  cookedIsHot     Boolean?
  cookedIsSafe    Boolean?
  cookedIsLeaking Boolean?
  cookedIsSpoiled Boolean?
  verified        Boolean
  additionalNotes String?
  donation        Donation @relation(fields: [donationId], references: [id])
  donationId      Int      @unique
}

//
// User.prisma
//

enum RoleCode {
  RECIPIENT
  DRIVER
  DONOR
  ADMIN
}

model user {
  id                  String            @id
  email               String            @unique
  firstname           String?
  lastname            String?
  password            String?
  phoneNumber         String?
  address             String?
  gender              String?
  age                 Int?
  is_verified         Boolean?          @default(false)
  profile_picture_url String?
  donations           Donation[]
  Driver              Driver[]
  Recipient           Recipient[]
  driverReviews       DriverReview[]
  recipientReviews    RecipientReview[]
  DonorReview         DonorReview[]
}
