//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  GENERAL
}

model ApiKey {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) // using uuid-ossp extension for Postgres
  key         String       @unique
  version     Int          @default(1)
  permissions Permission[]
  comments    String[]
  status      Boolean?     @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

//
// Donation.prisma
//

enum FoodCategory {
  GREENS
  COOKED
  GRAINS
  DAIRY
  FROZEN
  GROCERIES
}

model Donation {
  id              Int          @id @default(autoincrement())
  title           String
  category        FoodCategory
  latitude        Float
  longitude       Float
  pickUpTimestamp DateTime
  expiryDate      DateTime
  description     String
  user            User         @relation(fields: [userId], references: [id])
  userId          Int
  pictures        Picture[]
  SafetyCheck     SafetyCheck?
}

model Picture {
  id         Int      @id @default(autoincrement())
  url        String
  donation   Donation @relation(fields: [donationId], references: [id])
  donationId Int
}

//
// Driver.prisma
//

model Driver {
  id                      Int      @id @default(autoincrement())
  carType                 String
  carMake                 String
  carModel                String
  manufactureYear         String
  color                   String
  registrationCertificate String
  licensePlate            String
  photos                  String[]
  vehicleInspictionReport String
  driverLicense           String
  verified                Boolean
  userId                  Int
  user                    User     @relation(fields: [userId], references: [id])
}

//
// Recipient.prisma
//

enum OrganizationType {
  ORPHANAGE
  HOMELESS_SHELTER
  COMMUNITY_KITCHEN
  FAMILY_IN_NEED
  ANIMAL_SHELTER
}

model Recipient {
  id             Int              @id @default(autoincrement())
  logo           String
  name           String
  type           OrganizationType
  pictures       String[]
  amountOfPeople Int
  bio            String
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
}

//
// SafetyCheck.prisma
//

enum Issues {
  BLOATED_CANS
  UNSAFE_BAGS
  STALE_BAKERY
  ROTTEN_FRUITS_OR_VEGETABLES
}

model SafetyCheck {
  id              Int      @id @default(autoincrement())
  expired         Boolean
  leaking         Boolean
  spoiled         Boolean
  issues          Issues[]
  cookedIsExpired Boolean?
  cookedIsHot     Boolean?
  cookedIsSafe    Boolean?
  cookedIsLeaking Boolean?
  cookedIsSpoiled Boolean?
  verified        Boolean
  additionalNotes String?
  donation        Donation @relation(fields: [donationId], references: [id])
  donationId      Int      @unique
}

//
// User.prisma
//

enum RoleCode {
  RECIPIENT
  DRIVER
  DONOR
  ADMIN
}

model Role {
  id        Int      @id @default(autoincrement())
  code      RoleCode
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model User {
  id                  Int         @id @default(autoincrement())
  firstname           String
  lastname            String
  email               String      @unique
  password            String
  phoneNumber         String
  address             String?
  gender              String?
  age                 Int?
  is_verified         Boolean     @default(false)
  profile_picture_url String
  roles               Role[]
  Keystore            Keystore[]
  donations           Donation[]
  Driver              Driver[]
  Recipient           Recipient[]
}

model Keystore {
  id           Int      @id @default(autoincrement())
  client       User     @relation(fields: [clientId], references: [id])
  clientId     Int
  primaryKey   String
  secondaryKey String
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
